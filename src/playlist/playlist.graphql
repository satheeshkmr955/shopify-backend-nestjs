scalar DateTime

type PaginationInfo {
  take: Int!
  after: String
  hasNextPage: Boolean!
}

input PaginateInput {
  take: Int
  after: String
}

type Playlist {
  id: ID!
  name: String!
  songs: [Song!]!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaginatedPlaylist {
  items: [Playlist!]!
  pagination: PaginationInfo!
}

type Query {
  playlist(input: IDInput!): Playlist
  playlists(input: PaginateInput): PaginatedPlaylist!
}

type Mutation {
  createPlaylist(input: CreatePlaylistInput!): Playlist!
  updatePlaylist(input: UpdatePlaylistInput!): Playlist!
  deletePlaylist(input: IDInput!): Playlist!
}

input IDInput {
  id: ID!
}

input CreatePlaylistInput {
  name: String!
  songs: [String!]
}

input UpdatePlaylistInput {
  id: ID!
  name: String
  songs: [String!]
}
